#ifndef __QUADTREEBUILDER_H__
#define __QUADTREEBUILDER_H__

/* QuadTreeBuilder
This class is for demonstrating how to build a QuadTree on a GPU using CUDA.
It assumes the output data and quadtree will be vizualized, and as such the
toy data that is created is generated to fit within an image. The underlying
routines for generating the QuadTree do not require this constraint

author: John D. Long, II PhD	email: jlong29@gmail.com
*/

#include <cuda_runtime.h>

class QuadTreeBuilder 
{
	private:
		int width;
		int height;
		int numData;

		int numNodes;
		int step;

		float* h_left;
		float* h_right;
		float* h_bottom;
		float* h_top;

		int*   h_child;

		float* d_left;
		float* d_right;
		float* d_bottom;
		float* d_top;

		float* d_x;
		float* d_y;
		size_t dataSz;
		size_t nodeSz;

		int*   d_child;

		int*   d_index;
		int*   d_mutex;  //used for locking 

		float elpsTime;
		cudaEvent_t start, stop; // used for timing

	public:
		float* h_x;
		float* h_y;

		uchar4* d_img;
		size_t imgSz;

		QuadTreeBuilder();
		QuadTreeBuilder(int n, int w = -1, int h = -1);
		~QuadTreeBuilder();

		int allocate();
		void deallocate();

		//Set parameters: n is required for functioning. w and h are for visualization
		void setParameters(int n, int w = -1, int h = -1);

		//Set data generated by another GPU process
		void setData(const float* x, const float* y);

		int getNumData();
		int resetData();

		//build the quad tree
		void build();

		//Write visualization
		int createViz();

		int downloadData();

	private:
		//Root GPU Launch Optimization
		//1D
		//Optimized for building quad tree
		const dim3 gridSize  = 512;
		const dim3 blockSize = 256;
		//For setting random data
		int threads;
		int blocks;

		//2D
		dim3 blockDim, gridDim;

		//Resets arrays used in constructing the quad tree
		void ResetArrays(int* mutex, float* x, float* y, int* child, int* index, float* left, float* right, float* bottom, float* top, int n, int m);
		void ResetArrays(int* mutex, float* x, float* y, int* child, int* index, float* left, float* right, float* bottom, float* top, const int w, const int h, int n, int m);
		void ComputeBoundingBox(int* mutex, float* x, float* y, float* left, float* right, float* bottom, float* top, int n);
		void BuildQuadTree(float* x, float* y, int* child, int* index, float* left, float* right, float* bottom, float* top, int n, int m);

		static inline int divUp(int x, int y)
		{
			return (x + y - 1) / y;
		}
};

#endif
