#ifndef __QUADTREEBUILDER_H__
#define __QUADTREEBUILDER_H__

/* QuadTreeBuilder
This class is for demonstrating how to build a QuadTree on a GPU using CUDA.
It assumes the output data and quadtree will be vizualized, and as such the
toy data that is created is generated to fit within an image. The underlying
routines for generating the QuadTree do not require this constraint

author: John D. Long, II PhD	email: jlong29@gmail.com
*/

#include <cuda_runtime.h>

namespace quadTreeGPU
{

class QuadTreeBuilder 
{
	private:
		//General Quad Tree Builder parameters
		int width;
		int height;
		int numData;	//Max Possible
		int numNodes;	//Max Possible

		//Optional Quad Tree Filter parameters
		int numTestData;		// <= numData
		int numFilteredData;	// < numTestData

		float* d_left;
		float* d_right;
		float* d_bottom;
		float* d_top;

		float* d_x;
		float* d_y;
		float* d_score;
		float* d_rx;	//horizontal cell radius
		float* d_ry;	//vertical cell radius
		size_t dataSz;
		size_t nodeSz;

		//Packed arrays from filtered data
		float* d_xf;
		float* d_yf;
		float* d_scoref;

		int*   d_child;

		int*   d_index;
		int*   d_mutex;  //used for locking 

		float elpsTime;
		bool timersCreated;
		cudaEvent_t start, stop; // used for timing

	public:
		float* h_x;
		float* h_y;

		float* h_xf;
		float* h_yf;

		uchar4* d_img;
		size_t imgSz;

		QuadTreeBuilder();
		QuadTreeBuilder(int n, int w, int h, int d = -1, int q = -1);
		~QuadTreeBuilder();

		int allocate();
		void deallocate();

		//Set parameters: n is required for functioning. w and h are for visualization
		void setParameters(int n, int w, int h, int d = -1, int q = -1);

		//Set data generated by another GPU process
		void setData(const float* x, const float* y);
		void setData(const float* x, const float* y, const float* score, const int d);

		int getNumData();
		int resetData();
		int resetFilterData();

		//build the quad tree
		int build();

		//filter the data from m > n points to n points according to highest score
		//Takes in host side counter
		int filter(float* x, float* y, float* score, const int d, const int q);
		//Operates upon internal state
		int filter();
		//Takes in device side counter
		int filter(float* x, float* y, float* score, unsigned int* d, const int q);
		//Operates upon internal state and external device data intput
		int filter(unsigned int* d);

		//Create build visualization
		int createBuildViz();
		//Create filter visualization
		int createFilterViz();

		int downloadData();
		int downloadFilterData();

	private:
		//Root GPU Launch Optimization
		//1D
		int threads;
		int blocks;

		//2D
		dim3 blockDim, gridDim;

		//Resets arrays used in constructing the quad tree
		void ResetArrays(const int w, const int h);
		void ResetFilterArrays(const int q, const int w, const int h);
		void BuildQuadTree();
		void FilterQuadTree(const int d, const int q, const int f);
		void FilterQuadTreeDev(unsigned int* d, const int q, const int f);

		static inline int divUp(int x, int y)
		{
			return (x + y - 1) / y;
		}
};

}	//namespace quadTreeGPU

#endif
